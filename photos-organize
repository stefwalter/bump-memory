#!/usr/bin/env python3

import argparse
import datetime
import os
import re
import shutil
import sys
import time

import exifread

REGEXPS = (
    re.compile("^(?P<year>[0-9]{4})(?P<month>[0-9]{2})(?P<day>[0-9]{2})[^0-9].*"),
    re.compile("^IMG_(?P<year>[0-9]{4})(?P<month>[0-9]{2})(?P<day>[0-9]{2})_.*"),
    re.compile("^[0-9]{3}(?P<year>)_(?P<day>[0-9]{2})(?P<month>[0-9]{2})$"),
    re.compile("^(?P<year>[0-9]{2})_(?P<month>[0-9]{2})_(?P<day>[0-9]{2}) [A-Za-z].*$"),
)

def stamps(path):
    results = set()
    date = None

    def add(x):
        results.add(x.isoformat()[0:10])

    # Look at the datetime to use below. Only added to results as last resort
    if not date:
        date = datetime.date.fromtimestamp(os.path.getmtime(path))

    # Use the regular expressions to guess the date
    names = (os.path.basename(path), os.path.basename(os.path.dirname(path)))
    for regexp in REGEXPS:
        for name in names:
            match = regexp.match(name)
            if match:
                try:
                    year = int(match['year'] or date.year)
                    if year < 20:
                        year += 2000
                    if year > 100 and year > 90:
                        year += 1900
                    month = int(match['month'] or date.month)
                    day = int(match['day'] or date.day)
                    date = datetime.date(year, month, day)
                    add(date)
                except ValueError:
                    pass

    # Try to use tags
    tag = None
    if not results and os.path.isfile(path):
        with open(path, 'rb') as f:
            tags = exifread.process_file(f)
        tag = tags.get("EXIF DateTimeOriginal")
        if not tag:
            tag = tags.get("EXIF DateTimeDigitized")
        if not tag:
            tag = tags.get("Image DateTime")
    if tag and tag.printable != '0000:00:00 00:00:00':
        # Add a UTC date
        try:
            date = datetime.datetime.strptime(tag.printable, "%Y:%m:%d %H:%M:%S")
        except ValueError:
            date = datetime.datetime.strptime(tag.printable, "%Y.%m.%d %H.%M.%S")
        add(date)
        # Add a Central US zimetzone date
        # date = datetime.datetime.strptime(tag.printable + " -0600", "%Y:%m:%d %H:%M:%S %z")
        # add(date)

    # Use the file modified time as a last resort
    add(date)

    return tuple(results)

def folder(path, target, known):
    result = None
    create = []
    first = None

    for stamp in stamps(path):
        if not first:
            first = stamp
        if stamp in known:
            create.extend(known[stamp])
            result = os.path.basename(known[stamp][0])

    if not create:
        create.append(first)
        result = first

    # Create all the folders
    for c in create:
        os.makedirs(os.path.join(target, os.path.basename(c)), exist_ok=True)

    # Return the destination path
    return os.path.join(target, result)

def archive(path, target, known):
    dest = folder(path, target, known)
    name = os.path.basename(path)
    sys.stderr.write("{0}\n".format(name))
    shutil.move(path, os.path.join(dest, name))

def index(root):
    result = { }
    def add(key, value):
        if key not in result:
            result[key] = []
        result[key].append(value)
    for directory, unused, names in os.walk(root):
        name = os.path.basename(directory)
        (stamp, unused, description) = name.partition(' ')
        add(stamp, directory)
        for name in names:
            path = os.path.join(directory, name)
            add(name, path)
            # We used to rename files from .mp4 to .MOV
            if name.endswith(".mp4"):
                name = name[:-4] + ".MOV"
                add(name, path)
    return result

def compare(path, name, known):
    for check in known.get(name, []):
        if os.stat(path).st_size == os.stat(check).st_size:
            return True
    return False

def process(target, root):
    assert target != root
    known = index(root)
    trash = os.path.join(target, "dup")
    for (directory, unused, names) in os.walk(target):
        for name in names:
            path = os.path.join(directory, name)
            if compare(path, name, known):
                os.makedirs(trash, exist_ok=True)
                os.link(path, os.path.join(trash, name))
            elif os.path.isfile(path):
                archive(path, target, known)

def main(argv):
    parser = argparse.ArgumentParser(description='Organize photos')
    parser.add_argument('root', help="The directory to organize")
    parser.add_argument('target', help="The directory to organize")
    opts = parser.parse_args()

    # If this directory exists we're already sorted
    check = os.path.join(opts.target, "dup")
    if os.path.exists(check):
         sys.stderr.write("Refusing to run in processed directory\n")
         return 2

    process(opts.target, opts.root)
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))
