#!/usr/bin/env python3

PORT     = 8089
URL      = "http://127.0.0.1:8089/requests/"
PASSWORD = "foobar"

import argparse
import base64
import fnmatch
import os
import random
import subprocess
import sys
import urllib.parse
import urllib.request
import xml.etree.ElementTree

import http.client
http.client.HTTPConnection.debuglevel = 1

BLACKLIST = (
    '*/*.THM',     # Lousy quality
    '*/MVI_*.AVI', # Don't play on our TV
    '*naked*/*',
    '*Naked*/*',
    '*nude*/*',
    '*Nude*/*',
)

class DirCache():
    def __init__(self, path, listing=None):
        self.path = path
        self.mtime = None
        self.listing = listing or []
        random.shuffle(self.listing)
        self.offset = 0

    def refresh(self):
        try:
            mtime = os.path.getmtime(self.path or "")
        except FileNotFoundError:
            mtime = None
        if mtime == self.mtime:
            return
        self.mtime = mtime
        try:
            if mtime is None:
                self.listing = []
            else:
                path = os.path.abspath(self.path)
                self.listing = [os.path.join(path, name) for name in os.listdir(path)]
        except PermissionError:
            self.listing = []
        random.shuffle(self.listing)
        self.offset = 0

    def __len__(self):
        self.refresh()
        return self.listing.__len__()

    def __getitem__(self, key):
        self.refresh()
        return self.listing.__getitem__(key)

    def next(self):
        self.refresh()
        if self.offset >= len(self.listing):
            self.offset = 0
            return None
        item = self.listing[self.offset]
        self.offset += 1
        return item

def launch():
    env = os.environ.copy().update(
        { "VLC_VERBOSE": "3" }
    )

    proc = subprocess.Popen([
        "vlc", "-v",
        "--avcodec-hw=none",
        "--fullscreen",
        "-I", "http",
        "--http-port", str(PORT),
        "--http-password", PASSWORD,
    ], env=env, stdin=subprocess.DEVNULL)

    return proc

def authorization():
    credentials = base64.b64encode(b":" + str.encode(PASSWORD))
    return "Basic " + credentials.decode('ascii')

def request(path, **options):
    url = urllib.parse.urljoin(URL, path)
    qs = urllib.parse.urlencode(options, quote_via=urllib.parse.quote)
    sys.stderr.write(qs + "\n")
    req = urllib.request.Request(url + "?" + qs)
    req.add_header("Authorization", authorization())
    return xml.etree.ElementTree.parse(urllib.request.urlopen(req))

def blacklisted(path):
    for match in BLACKLIST:
        if fnmatch.fnmatch(path, match):
            return True
    return False

def choose(path, caches):
    if os.path.isfile(path):
        return path
    elif path == "" or os.path.isdir(path):
        if path not in caches:
            caches[path] = DirCache(path)
        cache = caches[path]
        name = cache.next()
        # print(repr(name))
        if name is not None:
            choice = choose(name, caches)
            if choice is not None:
                return choice
    return None

# This represents a way of storing files where
# TODO xxxxxxxxxxxxxxxx
def dated(path):
    # The name of the folder should have a date and text
    directory = os.path.basename(os.path.dirname(path))
    when, unused, title = directory.partition(" ")
    when = when.replace("-00", "")
    return { "when": when, "description": title }

def prune(status):
    current = status.find('currentplid')

    before = []
    queued = []
    playlist = request("playlist.xml")
    for leaf in playlist.iter("leaf"):
        id = leaf.attrib.get("id")
        if queued:
            queued.append(id)
        elif current is None or id == current.text or current.text == '-1':
            queued.append(id)
        else:
            before.append(id)

    # Delete all but last ten
    for id in before[0:-10]:
        request("status.xml", command="pl_delete", id=id)

    return len(queued)

def content(libraries):
    caches = { "" : DirCache(None, listing=libraries) }
    while True:
        choice = choose("", caches)
        if choice and not blacklisted(choice):
            yield choice
    yield None

def display(library, metadata):
    proc = None
    choices = content(library)

    try:
        while True:
            if proc is None:
                proc = launch()
                first = True

            # Wait for one second and check if process exited
            try:
                if proc is not None:
                    proc.wait(1)
                proc = None
                continue
            except subprocess.TimeoutExpired:
                pass

            status = request("status.xml")

            # Prune playlist and check if we need more
            if prune(status) < 3:
                choice = next(choices)
                if not choice:
                    continue

                meta = metadata(choice)
                title = "{when}: {description}".format(**meta)

                fileurl = urllib.parse.urljoin("file:", urllib.request.pathname2url(choice))

                # This queues the file nicely
                status = request("status.xml", command="in_enqueue", input=fileurl, name=title)

            current = status.find('currentplid')
            if current is None or current.text == '-1':
                request("status.xml", command="pl_play")
    finally:
        if proc:
            kill(proc)

# Clean up the vlc process
def kill(proc):
    if proc.returncode is None:
        proc.kill()
        proc.wait()
    return proc.returncode

def listing(library):
    for choice in content(library):
        if not choice:
            break
        sys.stdout.write(choice)
        sys.stdout.write("\n")

def main():
    parser = argparse.ArgumentParser(description="Displays photos or videos via VLC")
    parser.add_argument("-n", "--dry-run", action='store_true', help="only list what would be displayed")
    parser.add_argument("library", nargs='+', help="path to photo libraries")
    opts = parser.parse_args()

    if opts.dry_run:
        listing(opts.library)
    else:
        display(opts.library, metadata=dated)

    return 0

if __name__ == '__main__':
    sys.exit(main())
