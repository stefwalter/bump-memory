#!/usr/bin/env python3

PORT     = 8089
URL      = "http://127.0.0.1:8089/requests/"
PASSWORD = "foobar"

import argparse
import base64
import os
import random
import subprocess
import sys
import urllib.parse
import urllib.request
import xml.etree.ElementTree

import http.client
http.client.HTTPConnection.debuglevel = 1

class DirCache():
    def __init__(self, path):
        self.path = path
        self.mtime = None
        self.listing = []

    def refresh(self):
        try:
            mtime = os.path.getmtime(self.path)
        except os.FileNotFoundError:
            mtime = None
        if mtime == self.mtime:
            return
        self.mtime = mtime
        if self.mtime is None:
            self.listing = []
        else:
            self.listing = os.listdir(self.path)

    def __len__(self):
        self.refresh()
        return self.listing.__len__()

    def __getitem__(self, key):
        self.refresh()
        return self.listing.__getitem__(key)

def launch():
    env = os.environ.copy().update(
        { "VLC_VERBOSE": "3" }
    )

    proc = subprocess.Popen([
        "vlc", "-I", "http",
        "--http-port", str(PORT),
        "--http-password", PASSWORD,
    ], env=env, stdin=subprocess.DEVNULL)

    return proc

def authorization():
    credentials = base64.b64encode(b":" + str.encode(PASSWORD))
    return "Basic " + credentials.decode('ascii')

def request(path, **options):
    url = urllib.parse.urljoin(URL, path)
    qs = urllib.parse.urlencode(options, quote_via=urllib.parse.quote)
    sys.stderr.write(qs + "\n")
    req = urllib.request.Request(url + "?" + qs)
    req.add_header("Authorization", authorization())
    return xml.etree.ElementTree.parse(urllib.request.urlopen(req))

def choose(path, caches):
    if os.path.isfile(path):
        return path
    elif os.path.isdir(path):
        if path not in caches:
            caches[path] = DirCache(path)
        cache = caches[path]
        if len(cache) == 0:
            return None
        for x in range(1, 10):
            name = random.choice(cache)
            choice = choose(os.path.join(path, name), caches)
            if choice is not None:
                return choice
    else:
        return None

# This represents a way of storing files where
# TODO xxxxxxxxxxxxxxxx
def dated(path):
    # The name of the folder should have a date and text
    directory = os.path.basename(os.path.dirname(path))
    when, unused, title = directory.partition(" ")
    return { "when": when, "description": title }

def prune():
    # Ask for status and check if on playlist item
    status = request("status.xml")
    current = status.find('currentplid')

    remaining = 0
    if current is not None:
        playlist = request("playlist.xml")
        for leaf in playlist.iter("leaf"):
            if remaining:
                remaining += 1
            else:
                id = leaf.attrib.get("id")
                if id == current.text:
                    remaining = 1
                else:
                    request("status.xml", command="pl_delete", id=id)

    return remaining

def loop(library, metadata):
    caches = { }
    first = False
    proc = None

    try:
        while True:
            if proc is None:
                proc = launch()
                first = True

            # Wait for one second and check if process exited
            try:
                if proc is not None:
                    proc.wait(1)
                proc = None
                continue
            except subprocess.TimeoutExpired:
                pass

            # Prune playlist and check if we need more
            if prune() > 3:
                continue

            # Queue a new item
            choice = choose(library, caches)
            if choice:
                meta = metadata(choice)
                title = "{when}: {description}".format(**meta)

                fileurl = urllib.parse.urljoin("file:", urllib.request.pathname2url(choice))

                # This queues the file nicely
                request("status.xml", command="in_enqueue", input=fileurl, name=title)

            if first:
                request("status.xml", command="pl_play")
                request("status.xml", command="fullscreen")
                first = False
    finally:
        if proc:
            kill(proc)

# Clean up the vlc process
def kill(proc):
    if proc.returncode is None:
        proc.kill()
        proc.wait()
    return proc.returncode

def main():
    parser = argparse.ArgumentParser(description="Displays photos or videos via VLC")
    parser.add_argument("library", help="path to photo library")
    opts = parser.parse_args()

    loop(opts.library, metadata=dated)
    return 0

if __name__ == '__main__':
    sys.exit(main())
